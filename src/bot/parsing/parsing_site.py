import json

from telethon import Button, events
from telethon.tl.types import UpdateBotCallbackQuery, UpdateNewMessage

from src.bot.parsing.parsing_presets import presets
from src.bot.parsing.sites.runner import run_parsing
from src.database.dao.Associations import UserSubscriptionDao, UserFilterSubscriptionDao
from src.database.dao.FilterDao import FilterDao
from src.database.dao.SubscriptionDao import SubscriptionDao
from src.database.dao.UserDao import UserDao
from src.main import client_bot
from src.utils.constants import media
from src.utils.utils import flag, moscow_time


def parsing_site_callback_filter(event):
    data = json.loads(event.data.decode("utf-8"))
    if "action" in data:
        action = data['action'].split(" ")[0]
        return action in ["first_filter", "presets", "favourite_subscription", "back_to_handle_site"]


async def handle_site(subscription_title, event, edit=None):
    if isinstance(event.original_update, UpdateBotCallbackQuery):
        user_id = event.original_update.user_id
    elif isinstance(event.original_update, UpdateNewMessage):
        user_id = event.original_update.message.peer_id.user_id

    subscription_id = (await SubscriptionDao.find_one_or_none(name=subscription_title)).id
    is_favourite = (
        await UserSubscriptionDao.find_one_or_none(user_id=event.chat_id, subscription_id=subscription_id)
    ).is_favourite
    favourite = "‚≠ê –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_favourite else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    buttons = [
        [Button.inline("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", data=json.dumps({"action": f"first_filter {subscription_title}"}))],
        [Button.inline("üíæ –ü—Ä–µ—Å–µ—Ç—ã", data=json.dumps({"action": f"presets {subscription_title}"}))],
        [Button.inline(favourite, data=json.dumps({"action": f"favourite_subscription {subscription_title}"}))],
        [Button.inline("–ù–∞–∑–∞–¥", data=json.dumps({"action": "begin_parsing"}))],
    ]

    title = flag(subscription_title.split(".")[1]) + " " + subscription_title
    subscription_id = (await SubscriptionDao.find_one_or_none(name=subscription_title)).id
    expired_at = (
        await UserSubscriptionDao.find_one_or_none(user_id=user_id, subscription_id=subscription_id)).expired_at
    time = moscow_time(expired_at)
    message = f"–ü–ª–æ—â–∞–¥–∫–∞: {title}\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è (–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ): {time} –ø–æ –ú–°–ö"

    if edit:
        await client_bot.edit_message(event.chat_id, event.original_update.msg_id, buttons=buttons)
    else:
        await client_bot.send_file(event.chat_id, caption=message, file=media,
                                   buttons=buttons)


@client_bot.on(events.CallbackQuery(func=parsing_site_callback_filter))
async def parsing_site_callback_handler(event):
    data = json.loads(event.data.decode("utf-8"))
    action = data['action']
    name = action.split(" ")[1]
    subscription_id = (await SubscriptionDao.find_one_or_none(name=name)).id
    if "first_filter" in action:
        is_subscription_active = await UserSubscriptionDao.is_active(user_id=event.chat_id,
                                                                     subscription_id=subscription_id)
        if is_subscription_active:
            await first_filter(event.chat_id, subscription_id)
        else:
            buttons = [[Button.inline("–ù–∞–∑–∞–¥", data=json.dumps({"action": "begin_parsing"}))]]
            await client_bot.send_message(event.chat_id, message="‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–ª–∫–∞.", buttons=buttons)
    elif "presets" in action:
        await presets(event.chat_id, subscription_id)
    elif "favourite_subscription" in action:
        await add_to_favourite(event.chat_id, subscription_id)
        await handle_site(name, event, edit=True)
    elif "back_to_handle_site":
        await handle_site(name, event)


async def first_filter(user_id, subscription_id):
    # language_of_words = await get_language_of_words(subscription_id)
    message = f"üí° –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞ –∞–Ω–≥–ª–∏–π–∏—Å–∫–æ–º —è–∑—ã–∫–µ, " \
              f"–ª–∏–±–æ –Ω–∞ —è–∑—ã–∫–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ø–ª–æ—â–∞–¥–∫–∏.\n[–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–ª–æ–≤: 10].\n–ü—Ä–∏–º–µ—Ä: jeans,shoes."

    filter_id = (await FilterDao.add(value="–°—Å—ã–ª–∫–∏ : ", question_number=1)).id
    await UserFilterSubscriptionDao.add(user_id=user_id, filter_id=filter_id, subscription_id=subscription_id)
    await client_bot.send_file(user_id, caption=message, file=media)


async def second_filter(user_id, filter_id):
    message = "üí∞ –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞:\n–ü—Ä–∏–º–µ—Ä: 100-80000\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
    filter_entity = await FilterDao.find_one_or_none(id=filter_id)
    value = filter_entity.value + "–¶–µ–Ω–∞ : "
    await FilterDao.update(filter_id, value=value)
    # button = [[Button.text("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", resize=True, single_use=True)]]
    await client_bot.send_message(user_id, message=message)  # buttons=button)


async def third_filter(user_id, subscription_id, filter_id):
    subscription_name = (await SubscriptionDao.find_one_or_none(id=subscription_id)).name
    filter_entity = await FilterDao.find_one_or_none(id=filter_id)
    if "DEPOP" in subscription_name:
        message = "üîΩ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    elif "GRAILED" in subscription_name or "POSHMARK" in subscription_name or "SCHPOCK" in subscription_name \
            or "VINTED" in subscription_name or "WALLAPOP" in subscription_name:
        message = "üîΩ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–ö–æ–ª-–≤–æ –æ–±—å—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    await FilterDao.update(filter_id, value=value)
    # button = [[Button.text("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", resize=True, single_use=True)]]
    await client_bot.send_message(user_id, message=message)  # buttons=button)


async def fourth_filter(user_id, subscription_id, filter_id):
    subscription_name = (await SubscriptionDao.find_one_or_none(id=subscription_id)).name
    filter_entity = await FilterDao.find_one_or_none(id=filter_id)
    if "DEPOP" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: (–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ) 2015-12-24\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è : "

    elif "GRAILED" in subscription_name or "SCHPOCK" in subscription_name \
            or "VINTED" in subscription_name or "WALLAPOP" in subscription_name:
        message = "üîΩ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–ö–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    elif "POSHMARK" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞\n–ü—Ä–∏–º–µ—Ä: (–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ) 2015-12-24\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "
    await FilterDao.update(filter_id, value=value)
    # button = [[Button.text("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", resize=True, single_use=True)]]
    await client_bot.send_message(user_id, message=message)  # , buttons=button)


async def fifth_filter(user_id, subscription_id, filter_id):
    subscription_name = (await SubscriptionDao.find_one_or_none(id=subscription_id)).name
    filter_entity = await FilterDao.find_one_or_none(id=filter_id)
    if "DEPOP" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (0-5)\n–ü—Ä–∏–º–µ—Ä: 4\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    elif "GRAILED" in subscription_name or "SCHPOCK" in subscription_name \
            or "WALLAPOP" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞\n–ü—Ä–∏–º–µ—Ä: (–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ) 2015-12-24\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    elif "POSHMARK" in subscription_name or "VINTED" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: (–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ) 2015-12-24\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è : "

    await FilterDao.update(filter_id, value=value)
    # button = [[Button.text("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", resize=True, single_use=True)]]
    await client_bot.send_message(user_id, message=message)#, buttons=button)


async def sixth_filter(user_id, subscription_id, filter_id):
    subscription_name = (await SubscriptionDao.find_one_or_none(id=subscription_id)).name
    filter_entity = await FilterDao.find_one_or_none(id=filter_id)

    if "GRAILED" in subscription_name or "SCHPOCK" in subscription_name \
            or "WALLAPOP" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: (–≥–æ–¥-–º–µ—Å—è—Ü-—á–∏—Å–ª–æ) 2015-12-24\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è : "

    elif "VINTED" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (0-5)\n–ü—Ä–∏–º–µ—Ä: 4\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    await FilterDao.update(filter_id, value=value)
    # button = [[Button.text("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", resize=True, single_use=True)]]
    await client_bot.send_message(user_id, message=message)#, buttons=button)


async def seventh_filter(user_id, subscription_id, filter_id):
    subscription_name = (await SubscriptionDao.find_one_or_none(id=subscription_id)).name
    filter_entity = await FilterDao.find_one_or_none(id=filter_id)

    if "GRAILED" in subscription_name or "SCHPOCK" in subscription_name \
            or "WALLAPOP" in subscription_name:
        message = "üóì –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (0-5)\n–ü—Ä–∏–º–µ—Ä: 4\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n**–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä**"
        value = filter_entity.value + "–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ : "

    await FilterDao.update(filter_id, value=value)
    # button = [[Button.text("–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä", resize=True, single_use=True)]]
    await client_bot.send_message(user_id, message=message)# buttons=button)


async def preset_choose(user_id):
    message = "üíæ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞?\n\n–í–≤–µ–¥–∏—Ç–µ –î–∞\–ù–µ—Ç"
    # button = [
    #     [
    #         Button.text("–î–∞", resize=True, single_use=True),
    #         Button.text("–ù–µ—Ç", resize=True, single_use=True)
    #     ]
    # ]
    await client_bot.send_message(user_id, message=message)# buttons=button)


async def preset_answer_handle(msg, user_id, subscription_id, filter_id):
    if msg.lower() == "–¥–∞":
        message = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ—Å–µ—Ç–∞"
        await UserDao.update(user_id, bot_message=message)
        await client_bot.send_message(user_id, message=message)
    else:
        await run_parsing(user_id, subscription_id, filter_id)


async def add_to_favourite(user_id, subscription_id):
    user_subscription = await UserSubscriptionDao.find_one_or_none(user_id=user_id, subscription_id=subscription_id)
    is_favourite = user_subscription.is_favourite
    await UserSubscriptionDao.update(user_subscription.id, is_favourite=not is_favourite)
